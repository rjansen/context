package proto

import (
	"fmt"
	// "errors"
	"github.com/rjansen/l"
	"github.com/rjansen/l/zap"
	// "github.com/golang/protobuf/proto"
	"bytes"
	"github.com/stretchr/testify/assert"
	// "io"
	"io/ioutil"
	"testing"
	"testing/iotest"
)

func init() {
	// os.Args = append(os.Args, "-ecf", "../../test/etc/haki/haki.yaml")
	if setupErr := zap.Setup(new(l.Configuration)); setupErr != nil {
		panic(setupErr)
	}
	l.Info("context.media.proto_test.init")
}

func TestProtoMarshalAndUnmarshalBytes(t *testing.T) {
	p := &Store{
		Id:   1,
		Name: "Proto Buffer Store",
		Data: []*Store_Data{
			&Store_Data{
				Id:    1,
				Name:  "Proto Data Name",
				Email: "Proto Data Email",
			},
		},
	}

	b, e := MarshalBytes(p)
	fmt.Printf("marshalbytes.protoMessage len=%d err=%v\n", len(b), e)
	assert.Nil(t, e)

	e = UnmarshalBytes(b, p)
	fmt.Printf("unmarshalbytes.protoMessage store=%s err=%v\n", p, e)
	assert.Nil(t, e)
	assert.NotZero(t, p.Id)
	assert.NotZero(t, p.Name)
	assert.NotZero(t, p.Data)
	assert.Len(t, p.Data, 1)
	data := p.Data[0]
	assert.NotZero(t, data.Id)
	assert.NotZero(t, data.Name)
	assert.NotZero(t, data.Email)
}

func TestProtoMarshalBytesErr(t *testing.T) {
	p := map[string]interface{}{
		"Id":   1,
		"Name": "Proto Buffer Store",
		"Data": []map[string]interface{}{
			map[string]interface{}{
				"Id":    1,
				"Name":  "Proto Data Name",
				"Email": "Proto Data Email",
			},
		},
	}

	_, e := MarshalBytes(p)
	assert.NotNil(t, e)
	assert.Equal(t, ErrInvalidProtoMessage, e)
}

func TestProtoUnmarshalBytesErr(t *testing.T) {
	p := make(map[string]interface{})

	data := []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e,
		0x14, 0xc7, 0x4d, 0x9a, 0x94, 0xf9, 0x26,
		0xdd, 0x91, 0xcc, 0x3f, 0x63, 0x01, 0x00, 0x00,
	}

	e := UnmarshalBytes(data, p)
	assert.NotNil(t, e)
	assert.Equal(t, ErrInvalidProtoMessage, e)
}

func TestProtoMarshalAndUnMarhsal(t *testing.T) {
	p := &Store{
		Id:   1,
		Name: "Proto Buffer Store",
		Data: []*Store_Data{
			&Store_Data{
				Id:    1,
				Name:  "Proto Data Name",
				Email: "Proto Data Email",
			},
		},
	}
	mockBuffer := new(bytes.Buffer)
	e := Marshal(mockBuffer, p)
	fmt.Printf("marshal.protoMessage len=%d err=%v\n", mockBuffer.Len(), e)
	assert.Nil(t, e)
	assert.True(t, mockBuffer.Len() > 0, "Buffer does not have any value")

	e = Unmarshal(mockBuffer, p)
	fmt.Printf("unmarshal.protoMessage store=%s err=%v\n", p, e)
	assert.Nil(t, e)
	assert.NotZero(t, p.Id)
	assert.NotZero(t, p.Name)
	assert.NotZero(t, p.Data)
	assert.Len(t, p.Data, 1)
	data := p.Data[0]
	assert.NotZero(t, data.Id)
	assert.NotZero(t, data.Name)
	assert.NotZero(t, data.Email)
}

func TestProtoMarshalErr(t *testing.T) {
	p := map[string]interface{}{
		"Id":   1,
		"Name": "Proto Buffer Store",
		"Data": []map[string]interface{}{
			map[string]interface{}{
				"Id":    1,
				"Name":  "Proto Data Name",
				"Email": "Proto Data Email",
			},
		},
	}

	e := Marshal(ioutil.Discard, p)
	assert.NotNil(t, e)
	assert.Equal(t, ErrInvalidProtoMessage, e)
}

func TestProtoUnmarshalErr(t *testing.T) {
	p := make(map[string]interface{})

	data := []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e,
		0x14, 0xc7, 0x4d, 0x9a, 0x94, 0xf9, 0x26,
		0xdd, 0x91, 0xcc, 0x3f, 0x63, 0x01, 0x00, 0x00,
	}

	mockBuffer := bytes.NewBuffer(data)
	e := Unmarshal(mockBuffer, p)
	assert.NotNil(t, e)
	assert.Equal(t, ErrInvalidProtoMessage, e)

	data = []byte{
		// 248 bytes of a valid gzipped FileDescriptorProto
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x8f, 0x41, 0x4b, 0xc3, 0x30,
		0x14, 0xc7, 0x4d, 0x9a, 0x94, 0xf9, 0x26, 0xa3, 0x3e, 0x74, 0x04, 0x4f, 0xa5, 0x28, 0x54, 0x0f,
		0x1d, 0x6c, 0xdf, 0x40, 0x1c, 0x28, 0x3a, 0x0a, 0x99, 0xe0, 0x39, 0xa3, 0xef, 0x50, 0x30, 0x6b,
		0xe9, 0xe2, 0x61, 0x67, 0xfd, 0xe0, 0x92, 0xb7, 0x09, 0x82, 0x17, 0x4f, 0xf9, 0xff, 0x7f, 0x2f,
		0xf9, 0x25, 0x81, 0xa9, 0xa7, 0xa6, 0x75, 0xb3, 0x7e, 0xe8, 0x42, 0x37, 0x6b, 0x5c, 0x70, 0x15,
		0x47, 0xd4, 0xbc, 0x14, 0x5f, 0x12, 0xf4, 0x3a, 0x74, 0x03, 0xe1, 0x04, 0x64, 0xdb, 0x18, 0x91,
		0x8b, 0x52, 0x5b, 0xd9, 0x36, 0x88, 0xa0, 0xb6, 0xce, 0x93, 0x91, 0xb9, 0x28, 0x4f, 0x2d, 0x67,
		0xbc, 0x01, 0x15, 0x15, 0x26, 0xc9, 0x93, 0x72, 0x3c, 0x3f, 0x3f, 0xa8, 0x2a, 0x3e, 0x5f, 0x3d,
		0xb8, 0xe0, 0x2c, 0x8f, 0xaf, 0x3e, 0x05, 0xa8, 0x58, 0xff, 0xe5, 0xbc, 0x00, 0x4d, 0xde, 0xb5,
		0xef, 0x26, 0x61, 0x78, 0x28, 0x38, 0x85, 0x74, 0xfb, 0xe1, 0x37, 0x34, 0x18, 0xc5, 0xf8, 0xd8,
		0xf0, 0x16, 0x54, 0xd8, 0xf7, 0x64, 0x74, 0x2e, 0xca, 0xc9, 0xfc, 0xf2, 0xcf, 0x0b, 0x5e, 0xf7,
		0x3d, 0x59, 0xde, 0x52, 0xdc, 0xc1, 0xe8, 0x87, 0x20, 0x40, 0xba, 0xaa, 0xef, 0x9f, 0x5e, 0x96,
		0xd9, 0x09, 0x8e, 0x40, 0x3d, 0xd6, 0xab, 0x65, 0x26, 0x62, 0x7a, 0xab, 0xed, 0x73, 0x26, 0x8b,
		0x05, 0x8c, 0xd9, 0xb1, 0x0e, 0x03, 0x39, 0x8f, 0xd7, 0x90, 0xee, 0x62, 0xdd, 0x19, 0xc1, 0x3f,
		0x3d, 0xfb, 0x7d, 0x8f, 0x3d, 0xce, 0x36, 0x29, 0xc3, 0xc5, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff,
		0xdd, 0x91, 0xcc, 0x3f, 0x63, 0x01, 0x00, 0x00,
	}

	mockBuffer = bytes.NewBuffer(data)
	e = Unmarshal(iotest.TimeoutReader(mockBuffer), p)
	assert.NotNil(t, e)
	assert.NotEqual(t, ErrInvalidProtoMessage, e)

	mockBuffer = bytes.NewBuffer([]byte{})
	e = Unmarshal(mockBuffer, p)
	assert.Equal(t, ErrEmptyInput, e)
}
